syntax = "proto3";

// Provider: google 4.69.1
package terraform.google.datasources.v4;

import "terraform/v1/meta.proto";

// GoogleCloudfunctionsFunction version is 0
message GoogleCloudfunctionsFunction {
  // Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
  int64 available_memory_mb = 1 [json_name = "available_memory_mb"];

  // A set of key/value environment variable pairs available during build time.
  map<string, string> build_environment_variables = 2 [json_name = "build_environment_variables"];

  // Name of the Cloud Build Custom Worker Pool that should be used to build the function.
  string build_worker_pool = 3 [json_name = "build_worker_pool"];

  // Description of the function.
  string description = 4;

  // Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
  string docker_registry = 5 [json_name = "docker_registry"];

  // User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry for storing images built with Cloud Build.
  string docker_repository = 6 [json_name = "docker_repository"];

  // Name of the function that will be executed when the Google Cloud Function is triggered.
  string entry_point = 7 [json_name = "entry_point"];

  // A set of key/value environment variable pairs to assign to the function.
  map<string, string> environment_variables = 8 [json_name = "environment_variables"];

  // A source that fires events in response to a condition in another service. Cannot be used with trigger_http.
  repeated EventTrigger event_trigger = 9 [json_name = "event_trigger"];

  // The security level for the function. Defaults to SECURE_OPTIONAL. Valid only if trigger_http is used.
  string https_trigger_security_level = 10 [json_name = "https_trigger_security_level"];

  // URL which triggers function execution. Returned only if trigger_http is used.
  string https_trigger_url = 11 [json_name = "https_trigger_url"];

  string id = 12;

  // String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL and ALLOW_INTERNAL_ONLY. Changes to this field will recreate the cloud function.
  string ingress_settings = 13 [json_name = "ingress_settings"];

  // Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.
  string kms_key_name = 14 [json_name = "kms_key_name"];

  // A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
  map<string, string> labels = 15;

  // The limit on the maximum number of function instances that may coexist at a given time.
  int64 max_instances = 16 [json_name = "max_instances"];

  // The limit on the minimum number of function instances that may coexist at a given time.
  int64 min_instances = 17 [json_name = "min_instances"];

  // A user-defined name of the function. Function names must be unique globally.
  string name = 18;

  // Project of the function. If it is not provided, the provider project is used.
  string project = 19;

  // Region of function. If it is not provided, the provider region is used.
  string region = 20;

  // The runtime in which the function is going to run. Eg. "nodejs8", "nodejs10", "python37", "go111".
  string runtime = 21;

  // Secret environment variables configuration
  repeated SecretEnvironmentVariables secret_environment_variables = 22 [json_name = "secret_environment_variables"];

  // Secret volumes configuration.
  repeated SecretVolumes secret_volumes = 23 [json_name = "secret_volumes"];

  // If provided, the self-provided service account to run the function with.
  string service_account_email = 24 [json_name = "service_account_email"];

  // The GCS bucket containing the zip archive which contains the function.
  string source_archive_bucket = 25 [json_name = "source_archive_bucket"];

  // The source archive object (file) in archive bucket.
  string source_archive_object = 26 [json_name = "source_archive_object"];

  // Represents parameters related to source repository where a function is hosted. Cannot be set alongside source_archive_bucket or source_archive_object.
  repeated SourceRepository source_repository = 27 [json_name = "source_repository"];

  // Describes the current stage of a deployment.
  string status = 28;

  // Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
  int64 timeout = 29;

  // Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with trigger_bucket and trigger_topic.
  bool trigger_http = 30 [json_name = "trigger_http"];

  // The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.
  string vpc_connector = 31 [json_name = "vpc_connector"];

  // The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
  string vpc_connector_egress_settings = 32 [json_name = "vpc_connector_egress_settings"];

  map<string, string> for_each = 33 [json_name = "for_each"];

  repeated string depends_on = 34 [json_name = "depends_on"];

  int32 count = 35;

  string provider = 36;

  terraform.v1.Lifecycle lifecycle = 37;

  message EventTrigger {
    // event_type: string
    string event_type = 1 [json_name = "event_type"];

    // failure_policy: list of object
    repeated FailurePolicy failure_policy = 2 [json_name = "failure_policy"];

    // resource: string
    string resource = 3;

    message FailurePolicy {
      // retry: bool
      bool retry = 1;
    }
  }

  message SecretEnvironmentVariables {
    // key: string
    string key = 1;

    // project_id: string
    string project_id = 2 [json_name = "project_id"];

    // secret: string
    string secret = 3;

    // version: string
    string version = 4;
  }

  message SecretVolumes {
    // mount_path: string
    string mount_path = 1 [json_name = "mount_path"];

    // project_id: string
    string project_id = 2 [json_name = "project_id"];

    // secret: string
    string secret = 3;

    // versions: list of object
    repeated Versions versions = 4;

    message Versions {
      // path: string
      string path = 1;

      // version: string
      string version = 2;
    }
  }

  message SourceRepository {
    // deployed_url: string
    string deployed_url = 1 [json_name = "deployed_url"];

    // url: string
    string url = 2;
  }
}

// GoogleCloudfunctionsFunctionIamPolicy version is 0
message GoogleCloudfunctionsFunctionIamPolicy {
  string cloud_function = 1 [json_name = "cloud_function"];

  string etag = 2;

  string id = 3;

  string policy_data = 4 [json_name = "policy_data"];

  string project = 5;

  string region = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;
}
