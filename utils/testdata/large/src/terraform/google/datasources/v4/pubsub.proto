syntax = "proto3";

// Provider: google 4.69.1
package terraform.google.datasources.v4;

import "terraform/v1/meta.proto";

// GooglePubsubSubscription version is 0
message GooglePubsubSubscription {
  // This value is the maximum time after a subscriber receives a message
  // before the subscriber should acknowledge the message. After message
  // delivery but before the ack deadline expires and before the message is
  // acknowledged, it is an outstanding message and will not be delivered
  // again during that time (on a best-effort basis).
  //
  // For pull subscriptions, this value is used as the initial value for
  // the ack deadline. To override this value for a given message, call
  // subscriptions.modifyAckDeadline with the corresponding ackId if using
  // pull. The minimum custom deadline you can specify is 10 seconds. The
  // maximum custom deadline you can specify is 600 seconds (10 minutes).
  // If this parameter is 0, a default value of 10 seconds is used.
  //
  // For push delivery, this value is also used to set the request timeout
  // for the call to the push endpoint.
  //
  // If the subscriber never acknowledges the message, the Pub/Sub system
  // will eventually redeliver the message.
  int64 ack_deadline_seconds = 1 [json_name = "ack_deadline_seconds"];

  // If delivery to BigQuery is used with this subscription, this field is used to configure it.
  // Either pushConfig or bigQueryConfig can be set, but not both.
  // If both are empty, then the subscriber will pull and ack messages using API methods.
  repeated BigqueryConfig bigquery_config = 2 [json_name = "bigquery_config"];

  // A policy that specifies the conditions for dead lettering messages in
  // this subscription. If dead_letter_policy is not set, dead lettering
  // is disabled.
  //
  // The Cloud Pub/Sub service account associated with this subscription's
  // parent project (i.e.,
  // service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
  // permission to Acknowledge() messages on this subscription.
  repeated DeadLetterPolicy dead_letter_policy = 3 [json_name = "dead_letter_policy"];

  // If 'true', Pub/Sub provides the following guarantees for the delivery
  // of a message with a given value of messageId on this Subscriptions':
  //
  // - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.
  //
  // - An acknowledged message will not be resent to a subscriber.
  //
  // Note that subscribers may still receive multiple copies of a message when 'enable_exactly_once_delivery'
  // is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
  bool enable_exactly_once_delivery = 4 [json_name = "enable_exactly_once_delivery"];

  // If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to
  // the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
  // may be delivered in any order.
  bool enable_message_ordering = 5 [json_name = "enable_message_ordering"];

  // A policy that specifies the conditions for this subscription's expiration.
  // A subscription is considered active as long as any connected subscriber
  // is successfully consuming messages from the subscription or is issuing
  // operations on the subscription. If expirationPolicy is not set, a default
  // policy with ttl of 31 days will be used.  If it is set but ttl is "", the
  // resource never expires.  The minimum allowed value for expirationPolicy.ttl
  // is 1 day.
  repeated ExpirationPolicy expiration_policy = 6 [json_name = "expiration_policy"];

  // The subscription only delivers the messages that match the filter.
  // Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
  // by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
  // you can't modify the filter.
  string filter = 7;

  string id = 8;

  // A set of key/value label pairs to assign to this Subscription.
  map<string, string> labels = 9;

  // How long to retain unacknowledged messages in the subscription's
  // backlog, from the moment a message is published. If
  // retain_acked_messages is true, then this also configures the retention
  // of acknowledged messages, and thus configures how far back in time a
  // subscriptions.seek can be done. Defaults to 7 days. Cannot be more
  // than 7 days ('"604800s"') or less than 10 minutes ('"600s"').
  //
  // A duration in seconds with up to nine fractional digits, terminated
  // by 's'. Example: '"600.5s"'.
  string message_retention_duration = 10 [json_name = "message_retention_duration"];

  // Name of the subscription.
  string name = 11;

  string project = 12;

  // If push delivery is used with this subscription, this field is used to
  // configure it. An empty pushConfig signifies that the subscriber will
  // pull and ack messages using API methods.
  repeated PushConfig push_config = 13 [json_name = "push_config"];

  // Indicates whether to retain acknowledged messages. If 'true', then
  // messages are not expunged from the subscription's backlog, even if
  // they are acknowledged, until they fall out of the
  // messageRetentionDuration window.
  bool retain_acked_messages = 14 [json_name = "retain_acked_messages"];

  // A policy that specifies how Pub/Sub retries message delivery for this subscription.
  //
  // If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
  // RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
  repeated RetryPolicy retry_policy = 15 [json_name = "retry_policy"];

  // A reference to a Topic resource.
  string topic = 16;

  map<string, string> for_each = 17 [json_name = "for_each"];

  repeated string depends_on = 18 [json_name = "depends_on"];

  int32 count = 19;

  string provider = 20;

  terraform.v1.Lifecycle lifecycle = 21;

  message BigqueryConfig {
    // drop_unknown_fields: bool
    bool drop_unknown_fields = 1 [json_name = "drop_unknown_fields"];

    // table: string
    string table = 2;

    // use_topic_schema: bool
    bool use_topic_schema = 3 [json_name = "use_topic_schema"];

    // write_metadata: bool
    bool write_metadata = 4 [json_name = "write_metadata"];
  }

  message DeadLetterPolicy {
    // dead_letter_topic: string
    string dead_letter_topic = 1 [json_name = "dead_letter_topic"];

    // max_delivery_attempts: number
    int64 max_delivery_attempts = 2 [json_name = "max_delivery_attempts"];
  }

  message ExpirationPolicy {
    // ttl: string
    string ttl = 1;
  }

  message PushConfig {
    // attributes: map of string
    map<string, string> attributes = 1;

    // oidc_token: list of object
    repeated OidcToken oidc_token = 2 [json_name = "oidc_token"];

    // push_endpoint: string
    string push_endpoint = 3 [json_name = "push_endpoint"];

    message OidcToken {
      // audience: string
      string audience = 1;

      // service_account_email: string
      string service_account_email = 2 [json_name = "service_account_email"];
    }
  }

  message RetryPolicy {
    // maximum_backoff: string
    string maximum_backoff = 1 [json_name = "maximum_backoff"];

    // minimum_backoff: string
    string minimum_backoff = 2 [json_name = "minimum_backoff"];
  }
}

// GooglePubsubSubscriptionIamPolicy version is 0
message GooglePubsubSubscriptionIamPolicy {
  string etag = 1;

  string id = 2;

  string policy_data = 3 [json_name = "policy_data"];

  string project = 4;

  string subscription = 5;

  map<string, string> for_each = 6 [json_name = "for_each"];

  repeated string depends_on = 7 [json_name = "depends_on"];

  int32 count = 8;

  string provider = 9;

  terraform.v1.Lifecycle lifecycle = 10;
}

// GooglePubsubTopic version is 0
message GooglePubsubTopic {
  string id = 1;

  // The resource name of the Cloud KMS CryptoKey to be used to protect access
  // to messages published on this topic. Your project's PubSub service account
  // ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com') must have
  // 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature.
  // The expected format is 'projects/*/locations/*/keyRings/*/cryptoKeys/*'
  string kms_key_name = 2 [json_name = "kms_key_name"];

  // A set of key/value label pairs to assign to this Topic.
  map<string, string> labels = 3;

  // Indicates the minimum duration to retain a message after it is published
  // to the topic. If this field is set, messages published to the topic in
  // the last messageRetentionDuration are always available to subscribers.
  // For instance, it allows any attached subscription to seek to a timestamp
  // that is up to messageRetentionDuration in the past. If this field is not
  // set, message retention is controlled by settings on individual subscriptions.
  // Cannot be more than 31 days or less than 10 minutes.
  string message_retention_duration = 4 [json_name = "message_retention_duration"];

  // Policy constraining the set of Google Cloud Platform regions where
  // messages published to the topic may be stored. If not present, then no
  // constraints are in effect.
  repeated MessageStoragePolicy message_storage_policy = 5 [json_name = "message_storage_policy"];

  // Name of the topic.
  string name = 6;

  string project = 7;

  // Settings for validating messages published against a schema.
  repeated SchemaSettings schema_settings = 8 [json_name = "schema_settings"];

  map<string, string> for_each = 9 [json_name = "for_each"];

  repeated string depends_on = 10 [json_name = "depends_on"];

  int32 count = 11;

  string provider = 12;

  terraform.v1.Lifecycle lifecycle = 13;

  message MessageStoragePolicy {
    // allowed_persistence_regions: list of string
    repeated string allowed_persistence_regions = 1 [json_name = "allowed_persistence_regions"];
  }

  message SchemaSettings {
    // encoding: string
    string encoding = 1;

    // schema: string
    string schema = 2;
  }
}

// GooglePubsubTopicIamPolicy version is 0
message GooglePubsubTopicIamPolicy {
  string etag = 1;

  string id = 2;

  string policy_data = 3 [json_name = "policy_data"];

  string project = 4;

  string topic = 5;

  map<string, string> for_each = 6 [json_name = "for_each"];

  repeated string depends_on = 7 [json_name = "depends_on"];

  int32 count = 8;

  string provider = 9;

  terraform.v1.Lifecycle lifecycle = 10;
}
