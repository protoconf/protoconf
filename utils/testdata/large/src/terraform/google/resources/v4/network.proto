syntax = "proto3";

// Provider: google 4.69.1
package terraform.google.resources.v4;

import "terraform/v1/meta.proto";

// GoogleNetworkConnectivityHub version is 0
message GoogleNetworkConnectivityHub {
  // Output only. The time the hub was created.
  string create_time = 1 [json_name = "create_time"];

  // An optional description of the hub.
  string description = 2;

  string id = 3;

  // Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
  map<string, string> labels = 4;

  // Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
  string name = 5;

  // The project for the resource
  string project = 6;

  // The VPC network associated with this hub's spokes. All of the VPN tunnels, VLAN attachments, and router appliance instances referenced by this hub's spokes must belong to this VPC network. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.
  repeated RoutingVpcs routing_vpcs = 7 [json_name = "routing_vpcs"];

  // Output only. The current lifecycle state of this hub. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
  string state = 8;

  // Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.
  string unique_id = 9 [json_name = "unique_id"];

  // Output only. The time the hub was last updated.
  string update_time = 10 [json_name = "update_time"];

  repeated Timeouts timeouts = 11;

  map<string, string> for_each = 12 [json_name = "for_each"];

  repeated string depends_on = 13 [json_name = "depends_on"];

  int32 count = 14;

  string provider = 15;

  terraform.v1.Lifecycle lifecycle = 16;

  message RoutingVpcs {
    // uri: string
    string uri = 1;
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleNetworkConnectivitySpoke version is 0
message GoogleNetworkConnectivitySpoke {
  // Output only. The time the spoke was created.
  string create_time = 1 [json_name = "create_time"];

  // An optional description of the spoke.
  string description = 2;

  // Immutable. The URI of the hub that this spoke is attached to.
  string hub = 3;

  string id = 4;

  // Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
  map<string, string> labels = 5;

  // The location for the resource
  string location = 6;

  // Immutable. The name of the spoke. Spoke names must be unique.
  string name = 7;

  // The project for the resource
  string project = 8;

  // Output only. The current lifecycle state of this spoke. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
  string state = 9;

  // Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
  string unique_id = 10 [json_name = "unique_id"];

  // Output only. The time the spoke was last updated.
  string update_time = 11 [json_name = "update_time"];

  LinkedInterconnectAttachments linked_interconnect_attachments = 12 [json_name = "linked_interconnect_attachments"];

  LinkedRouterApplianceInstances linked_router_appliance_instances = 13 [json_name = "linked_router_appliance_instances"];

  LinkedVpnTunnels linked_vpn_tunnels = 14 [json_name = "linked_vpn_tunnels"];

  repeated Timeouts timeouts = 15;

  map<string, string> for_each = 16 [json_name = "for_each"];

  repeated string depends_on = 17 [json_name = "depends_on"];

  int32 count = 18;

  string provider = 19;

  terraform.v1.Lifecycle lifecycle = 20;

  message LinkedInterconnectAttachments {
    // A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    bool site_to_site_data_transfer = 1 [json_name = "site_to_site_data_transfer"];

    // The URIs of linked interconnect attachment resources
    repeated string uris = 2;
  }

  message LinkedRouterApplianceInstances {
    // A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    bool site_to_site_data_transfer = 1 [json_name = "site_to_site_data_transfer"];

    repeated Instances instances = 2;

    message Instances {
      // The IP address on the VM to use for peering.
      string ip_address = 1 [json_name = "ip_address"];

      // The URI of the virtual machine resource
      string virtual_machine = 2 [json_name = "virtual_machine"];
    }
  }

  message LinkedVpnTunnels {
    // A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    bool site_to_site_data_transfer = 1 [json_name = "site_to_site_data_transfer"];

    // The URIs of linked VPN tunnel resources.
    repeated string uris = 2;
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleNetworkManagementConnectivityTest version is 0
message GoogleNetworkManagementConnectivityTest {
  // The user-supplied description of the Connectivity Test.
  // Maximum of 512 characters.
  string description = 1;

  string id = 2;

  // Resource labels to represent user-provided metadata.
  map<string, string> labels = 3;

  // Unique name for the connectivity test.
  string name = 4;

  string project = 5;

  // IP Protocol of the test. When not provided, "TCP" is assumed.
  string protocol = 6;

  // Other projects that may be relevant for reachability analysis.
  // This is applicable to scenarios where a test can cross project
  // boundaries.
  repeated string related_projects = 7 [json_name = "related_projects"];

  Destination destination = 8;

  Source source = 9;

  repeated Timeouts timeouts = 10;

  map<string, string> for_each = 11 [json_name = "for_each"];

  repeated string depends_on = 12 [json_name = "depends_on"];

  int32 count = 13;

  string provider = 14;

  terraform.v1.Lifecycle lifecycle = 15;

  message Destination {
    // A Compute Engine instance URI.
    string instance = 1;

    // The IP address of the endpoint, which can be an external or
    // internal IP. An IPv6 address is only allowed when the test's
    // destination is a global load balancer VIP.
    string ip_address = 2 [json_name = "ip_address"];

    // A Compute Engine network URI.
    string network = 3;

    // The IP protocol port of the endpoint. Only applicable when
    // protocol is TCP or UDP.
    int64 port = 4;

    // Project ID where the endpoint is located. The Project ID can be
    // derived from the URI if you provide a VM instance or network URI.
    // The following are two cases where you must provide the project ID:
    // 1. Only the IP address is specified, and the IP address is within
    // a GCP project. 2. When you are using Shared VPC and the IP address
    // that you provide is from the service project. In this case, the
    // network that the IP address resides in is defined in the host
    // project.
    string project_id = 5 [json_name = "project_id"];
  }

  message Source {
    // A Compute Engine instance URI.
    string instance = 1;

    // The IP address of the endpoint, which can be an external or
    // internal IP. An IPv6 address is only allowed when the test's
    // destination is a global load balancer VIP.
    string ip_address = 2 [json_name = "ip_address"];

    // A Compute Engine network URI.
    string network = 3;

    // Type of the network where the endpoint is located. Possible values: ["GCP_NETWORK", "NON_GCP_NETWORK"]
    string network_type = 4 [json_name = "network_type"];

    // The IP protocol port of the endpoint. Only applicable when
    // protocol is TCP or UDP.
    int64 port = 5;

    // Project ID where the endpoint is located. The Project ID can be
    // derived from the URI if you provide a VM instance or network URI.
    // The following are two cases where you must provide the project ID:
    //
    // 1. Only the IP address is specified, and the IP address is
    //   within a GCP project.
    // 2. When you are using Shared VPC and the IP address
    //   that you provide is from the service project. In this case,
    //   the network that the IP address resides in is defined in the
    //   host project.
    string project_id = 6 [json_name = "project_id"];
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleNetworkServicesEdgeCacheKeyset version is 0
message GoogleNetworkServicesEdgeCacheKeyset {
  // A human-readable description of the resource.
  string description = 1;

  string id = 2;

  // Set of label tags associated with the EdgeCache resource.
  map<string, string> labels = 3;

  // Name of the resource; provided by the client when the resource is created.
  // The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
  // and all following characters must be a dash, underscore, letter or digit.
  string name = 4;

  string project = 5;

  repeated PublicKey public_key = 6 [json_name = "public_key"];

  repeated Timeouts timeouts = 7;

  repeated ValidationSharedKeys validation_shared_keys = 8 [json_name = "validation_shared_keys"];

  map<string, string> for_each = 9 [json_name = "for_each"];

  repeated string depends_on = 10 [json_name = "depends_on"];

  int32 count = 11;

  string provider = 12;

  terraform.v1.Lifecycle lifecycle = 13;

  message PublicKey {
    // The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
    // The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
    // which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
    string id = 1;

    // Set to true to have the CDN automatically manage this public key value.
    bool managed = 2;

    // The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
    // Representations or encodings of the public key other than this will be rejected with an error.
    string value = 3;
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }

  message ValidationSharedKeys {
    // The name of the secret version in Secret Manager.
    //
    // The resource name of the secret version must be in the format 'projects/*/secrets/*/versions/*' where the '*' values are replaced by the secrets themselves.
    // The secrets must be at least 16 bytes large.  The recommended secret size depends on the signature algorithm you are using.
    // * If you are using HMAC-SHA1, we suggest 20-byte secrets.
    // * If you are using HMAC-SHA256, we suggest 32-byte secrets.
    // See RFC 2104, Section 3 for more details on these recommendations.
    string secret_version = 1 [json_name = "secret_version"];
  }
}

// GoogleNetworkServicesEdgeCacheOrigin version is 0
message GoogleNetworkServicesEdgeCacheOrigin {
  // A human-readable description of the resource.
  string description = 1;

  // The Origin resource to try when the current origin cannot be reached.
  // After maxAttempts is reached, the configured failoverOrigin will be used to fulfil the request.
  //
  // The value of timeout.maxAttemptsTimeout dictates the timeout across all origins.
  // A reference to a Topic resource.
  string failover_origin = 2 [json_name = "failover_origin"];

  string id = 3;

  // Set of label tags associated with the EdgeCache resource.
  map<string, string> labels = 4;

  // The maximum number of attempts to cache fill from this origin. Another attempt is made when a cache fill fails with one of the retryConditions.
  //
  // Once maxAttempts to this origin have failed the failoverOrigin will be used, if one is specified. That failoverOrigin may specify its own maxAttempts,
  // retryConditions and failoverOrigin to control its own cache fill failures.
  //
  // The total number of allowed attempts to cache fill across this and failover origins is limited to four.
  // The total time allowed for cache fill attempts across this and failover origins can be controlled with maxAttemptsTimeout.
  //
  // The last valid, non-retried response from all origins will be returned to the client.
  // If no origin returns a valid response, an HTTP 502 will be returned to the client.
  //
  // Defaults to 1. Must be a value greater than 0 and less than 4.
  int64 max_attempts = 5 [json_name = "max_attempts"];

  // Name of the resource; provided by the client when the resource is created.
  // The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
  // and all following characters must be a dash, underscore, letter or digit.
  string name = 6;

  // A fully qualified domain name (FQDN) or IP address reachable over the public Internet, or the address of a Google Cloud Storage bucket.
  //
  // This address will be used as the origin for cache requests - e.g. FQDN: media-backend.example.com, IPv4: 35.218.1.1, IPv6: 2607:f8b0:4012:809::200e, Cloud Storage: gs://bucketname
  //
  // When providing an FQDN (hostname), it must be publicly resolvable (e.g. via Google public DNS) and IP addresses must be publicly routable.  It must not contain a protocol (e.g., https://) and it must not contain any slashes.
  // If a Cloud Storage bucket is provided, it must be in the canonical "gs://bucketname" format. Other forms, such as "storage.googleapis.com", will be rejected.
  string origin_address = 7 [json_name = "origin_address"];

  // The port to connect to the origin on.
  // Defaults to port 443 for HTTP2 and HTTPS protocols, and port 80 for HTTP.
  int64 port = 8;

  string project = 9;

  // The protocol to use to connect to the configured origin. Defaults to HTTP2, and it is strongly recommended that users use HTTP2 for both security & performance.
  //
  // When using HTTP2 or HTTPS as the protocol, a valid, publicly-signed, unexpired TLS (SSL) certificate must be presented by the origin server. Possible values: ["HTTP2", "HTTPS", "HTTP"]
  string protocol = 10;

  // Specifies one or more retry conditions for the configured origin.
  //
  // If the failure mode during a connection attempt to the origin matches the configured retryCondition(s),
  // the origin request will be retried up to maxAttempts times. The failoverOrigin, if configured, will then be used to satisfy the request.
  //
  // The default retryCondition is "CONNECT_FAILURE".
  //
  // retryConditions apply to this origin, and not subsequent failoverOrigin(s),
  // which may specify their own retryConditions and maxAttempts.
  //
  // Valid values are:
  //
  // - CONNECT_FAILURE: Retry on failures connecting to origins, for example due to connection timeouts.
  // - HTTP_5XX: Retry if the origin responds with any 5xx response code, or if the origin does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams.
  // - GATEWAY_ERROR: Similar to 5xx, but only applies to response codes 502, 503 or 504.
  // - RETRIABLE_4XX: Retry for retriable 4xx response codes, which include HTTP 409 (Conflict) and HTTP 429 (Too Many Requests)
  // - NOT_FOUND: Retry if the origin returns a HTTP 404 (Not Found). This can be useful when generating video content, and the segment is not available yet.
  // - FORBIDDEN: Retry if the origin returns a HTTP 403 (Forbidden). Possible values: ["CONNECT_FAILURE", "HTTP_5XX", "GATEWAY_ERROR", "RETRIABLE_4XX", "NOT_FOUND", "FORBIDDEN"]
  repeated string retry_conditions = 11 [json_name = "retry_conditions"];

  AwsV4Authentication aws_v4_authentication = 12 [json_name = "aws_v4_authentication"];

  OriginOverrideAction origin_override_action = 13 [json_name = "origin_override_action"];

  OriginRedirect origin_redirect = 14 [json_name = "origin_redirect"];

  Timeout timeout = 15;

  repeated Timeouts timeouts = 16;

  map<string, string> for_each = 17 [json_name = "for_each"];

  repeated string depends_on = 18 [json_name = "depends_on"];

  int32 count = 19;

  string provider = 20;

  terraform.v1.Lifecycle lifecycle = 21;

  message AwsV4Authentication {
    // The access key ID your origin uses to identify the key.
    string access_key_id = 1 [json_name = "access_key_id"];

    // The name of the AWS region that your origin is in.
    string origin_region = 2 [json_name = "origin_region"];

    // The Secret Manager secret version of the secret access key used by your origin.
    //
    // This is the resource name of the secret version in the format 'projects/*/secrets/*/versions/*' where the '*' values are replaced by the project, secret, and version you require.
    string secret_access_key_version = 3 [json_name = "secret_access_key_version"];
  }

  message OriginOverrideAction {
    HeaderAction header_action = 1 [json_name = "header_action"];

    UrlRewrite url_rewrite = 2 [json_name = "url_rewrite"];

    message HeaderAction {
      repeated RequestHeadersToAdd request_headers_to_add = 1 [json_name = "request_headers_to_add"];

      message RequestHeadersToAdd {
        // The name of the header to add.
        string header_name = 1 [json_name = "header_name"];

        // The value of the header to add.
        string header_value = 2 [json_name = "header_value"];

        // Whether to replace all existing headers with the same name.
        //
        // By default, added header values are appended
        // to the response or request headers with the
        // same field names. The added values are
        // separated by commas.
        //
        // To overwrite existing values, set 'replace' to 'true'.
        bool replace = 3;
      }
    }

    message UrlRewrite {
      // Prior to forwarding the request to the selected
      // origin, the request's host header is replaced with
      // contents of the hostRewrite.
      //
      // This value must be between 1 and 255 characters.
      string host_rewrite = 1 [json_name = "host_rewrite"];
    }
  }

  message OriginRedirect {
    // The set of redirect response codes that the CDN
    // follows. Values of
    // [RedirectConditions](https://cloud.google.com/media-cdn/docs/reference/rest/v1/projects.locations.edgeCacheOrigins#redirectconditions)
    // are accepted.
    repeated string redirect_conditions = 1 [json_name = "redirect_conditions"];
  }

  message Timeout {
    // The maximum duration to wait for a single origin connection to be established, including DNS lookup, TLS handshake and TCP/QUIC connection establishment.
    //
    // Defaults to 5 seconds. The timeout must be a value between 1s and 15s.
    //
    // The connectTimeout capped by the deadline set by the request's maxAttemptsTimeout.  The last connection attempt may have a smaller connectTimeout in order to adhere to the overall maxAttemptsTimeout.
    string connect_timeout = 1 [json_name = "connect_timeout"];

    // The maximum time across all connection attempts to the origin, including failover origins, before returning an error to the client. A HTTP 504 will be returned if the timeout is reached before a response is returned.
    //
    // Defaults to 15 seconds. The timeout must be a value between 1s and 30s.
    //
    // If a failoverOrigin is specified, the maxAttemptsTimeout of the first configured origin sets the deadline for all connection attempts across all failoverOrigins.
    string max_attempts_timeout = 2 [json_name = "max_attempts_timeout"];

    // The maximum duration to wait between reads of a single HTTP connection/stream.
    //
    // Defaults to 15 seconds.  The timeout must be a value between 1s and 30s.
    //
    // The readTimeout is capped by the responseTimeout.  All reads of the HTTP connection/stream must be completed by the deadline set by the responseTimeout.
    //
    // If the response headers have already been written to the connection, the response will be truncated and logged.
    string read_timeout = 3 [json_name = "read_timeout"];

    // The maximum duration to wait for the last byte of a response to arrive when reading from the HTTP connection/stream.
    //
    // Defaults to 30 seconds. The timeout must be a value between 1s and 120s.
    //
    // The responseTimeout starts after the connection has been established.
    //
    // This also applies to HTTP Chunked Transfer Encoding responses, and/or when an open-ended Range request is made to the origin. Origins that take longer to write additional bytes to the response than the configured responseTimeout will result in an error being returned to the client.
    //
    // If the response headers have already been written to the connection, the response will be truncated and logged.
    string response_timeout = 4 [json_name = "response_timeout"];
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleNetworkServicesEdgeCacheService version is 0
message GoogleNetworkServicesEdgeCacheService {
  // A human-readable description of the resource.
  string description = 1;

  // Disables HTTP/2.
  //
  // HTTP/2 (h2) is enabled by default and recommended for performance. HTTP/2 improves connection re-use and reduces connection setup overhead by sending multiple streams over the same connection.
  //
  // Some legacy HTTP clients may have issues with HTTP/2 connections due to broken HTTP/2 implementations. Setting this to true will prevent HTTP/2 from being advertised and negotiated.
  bool disable_http2 = 2 [json_name = "disable_http2"];

  // HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
  bool disable_quic = 3 [json_name = "disable_quic"];

  // Resource URL that points at the Cloud Armor edge security policy that is applied on each request against the EdgeCacheService.
  string edge_security_policy = 4 [json_name = "edge_security_policy"];

  // URLs to sslCertificate resources that are used to authenticate connections between users and the EdgeCacheService.
  //
  // Note that only "global" certificates with a "scope" of "EDGE_CACHE" can be attached to an EdgeCacheService.
  repeated string edge_ssl_certificates = 5 [json_name = "edge_ssl_certificates"];

  string id = 6;

  // The IPv4 addresses associated with this service. Addresses are static for the lifetime of the service.
  repeated string ipv4_addresses = 7 [json_name = "ipv4_addresses"];

  // The IPv6 addresses associated with this service. Addresses are static for the lifetime of the service.
  repeated string ipv6_addresses = 8 [json_name = "ipv6_addresses"];

  // Set of label tags associated with the EdgeCache resource.
  map<string, string> labels = 9;

  // Name of the resource; provided by the client when the resource is created.
  // The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
  // and all following characters must be a dash, underscore, letter or digit.
  string name = 10;

  string project = 11;

  // Require TLS (HTTPS) for all clients connecting to this service.
  //
  // Clients who connect over HTTP (port 80) will receive a HTTP 301 to the same URL over HTTPS (port 443).
  // You must have at least one (1) edgeSslCertificate specified to enable this.
  bool require_tls = 12 [json_name = "require_tls"];

  // URL of the SslPolicy resource that will be associated with the EdgeCacheService.
  //
  // If not set, the EdgeCacheService has no SSL policy configured, and will default to the "COMPATIBLE" policy.
  string ssl_policy = 13 [json_name = "ssl_policy"];

  LogConfig log_config = 14 [json_name = "log_config"];

  Routing routing = 15;

  repeated Timeouts timeouts = 16;

  map<string, string> for_each = 17 [json_name = "for_each"];

  repeated string depends_on = 18 [json_name = "depends_on"];

  int32 count = 19;

  string provider = 20;

  terraform.v1.Lifecycle lifecycle = 21;

  message LogConfig {
    // Specifies whether to enable logging for traffic served by this service.
    bool enable = 1;

    // Configures the sampling rate of requests, where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0, and the value of the field must be in [0, 1].
    //
    // This field can only be specified if logging is enabled for this service.
    int64 sample_rate = 2 [json_name = "sample_rate"];
  }

  message Routing {
    repeated HostRule host_rule = 1 [json_name = "host_rule"];

    repeated PathMatcher path_matcher = 2 [json_name = "path_matcher"];

    message HostRule {
      // A human-readable description of the hostRule.
      string description = 1;

      // The list of host patterns to match.
      //
      // Host patterns must be valid hostnames. Ports are not allowed. Wildcard hosts are supported in the suffix or prefix form. * matches any string of ([a-z0-9-.]*). It does not match the empty string.
      //
      // When multiple hosts are specified, hosts are matched in the following priority:
      //
      //  1. Exact domain names: ''www.foo.com''.
      //  2. Suffix domain wildcards: ''*.foo.com'' or ''*-bar.foo.com''.
      //  3. Prefix domain wildcards: ''foo.*'' or ''foo-*''.
      //  4. Special wildcard ''*'' matching any domain.
      //
      //  Notes:
      //
      //    The wildcard will not match the empty string. e.g. ''*-bar.foo.com'' will match ''baz-bar.foo.com'' but not ''-bar.foo.com''. The longest wildcards match first. Only a single host in the entire service can match on ''*''. A domain must be unique across all configured hosts within a service.
      //
      //    Hosts are matched against the HTTP Host header, or for HTTP/2 and HTTP/3, the ":authority" header, from the incoming request.
      //
      //    You may specify up to 10 hosts.
      repeated string hosts = 2;

      // The name of the pathMatcher associated with this hostRule.
      string path_matcher = 3 [json_name = "path_matcher"];
    }

    message PathMatcher {
      // A human-readable description of the resource.
      string description = 1;

      // The name to which this PathMatcher is referred by the HostRule.
      string name = 2;

      repeated RouteRule route_rule = 3 [json_name = "route_rule"];

      message RouteRule {
        // A human-readable description of the routeRule.
        string description = 1;

        // The Origin resource that requests to this route should fetch from when a matching response is not in cache. Origins can be defined as short names ("my-origin") or fully-qualified resource URLs - e.g. "networkservices.googleapis.com/projects/my-project/global/edgecacheorigins/my-origin"
        //
        // Only one of origin or urlRedirect can be set.
        string origin = 2;

        // The priority of this route rule, where 1 is the highest priority.
        //
        // You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 1 and 999 inclusive.
        //
        // Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers
        // to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
        string priority = 3;

        HeaderAction header_action = 4 [json_name = "header_action"];

        repeated MatchRule match_rule = 5 [json_name = "match_rule"];

        RouteAction route_action = 6 [json_name = "route_action"];

        UrlRedirect url_redirect = 7 [json_name = "url_redirect"];

        message HeaderAction {
          repeated RequestHeaderToAdd request_header_to_add = 1 [json_name = "request_header_to_add"];

          repeated RequestHeaderToRemove request_header_to_remove = 2 [json_name = "request_header_to_remove"];

          repeated ResponseHeaderToAdd response_header_to_add = 3 [json_name = "response_header_to_add"];

          repeated ResponseHeaderToRemove response_header_to_remove = 4 [json_name = "response_header_to_remove"];

          message RequestHeaderToAdd {
            // The name of the header to add.
            string header_name = 1 [json_name = "header_name"];

            // The value of the header to add.
            string header_value = 2 [json_name = "header_value"];

            // Whether to replace all existing headers with the same name.
            bool replace = 3;
          }

          message RequestHeaderToRemove {
            // The name of the header to remove.
            string header_name = 1 [json_name = "header_name"];
          }

          message ResponseHeaderToAdd {
            // The name of the header to add.
            string header_name = 1 [json_name = "header_name"];

            // The value of the header to add.
            string header_value = 2 [json_name = "header_value"];

            // Whether to replace all existing headers with the same name.
            bool replace = 3;
          }

          message ResponseHeaderToRemove {
            // Headers to remove from the response prior to sending it back to the client.
            //
            // Response headers are only sent to the client, and do not have an effect on the cache serving the response.
            string header_name = 1 [json_name = "header_name"];
          }
        }

        message MatchRule {
          // For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL.
          string full_path_match = 1 [json_name = "full_path_match"];

          // Specifies that prefixMatch and fullPathMatch matches are case sensitive.
          bool ignore_case = 2 [json_name = "ignore_case"];

          // For satisfying the matchRule condition, the path of the request
          // must match the wildcard pattern specified in pathTemplateMatch
          // after removing any query parameters and anchor that may be part
          // of the original URL.
          //
          // pathTemplateMatch must be between 1 and 255 characters
          // (inclusive).  The pattern specified by pathTemplateMatch may
          // have at most 5 wildcard operators and at most 5 variable
          // captures in total.
          string path_template_match = 3 [json_name = "path_template_match"];

          // For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /.
          string prefix_match = 4 [json_name = "prefix_match"];

          repeated HeaderMatch header_match = 5 [json_name = "header_match"];

          repeated QueryParameterMatch query_parameter_match = 6 [json_name = "query_parameter_match"];

          message HeaderMatch {
            // The value of the header should exactly match contents of exactMatch.
            string exact_match = 1 [json_name = "exact_match"];

            // The header name to match on.
            string header_name = 2 [json_name = "header_name"];

            // If set to false (default), the headerMatch is considered a match if the match criteria above are met.
            // If set to true, the headerMatch is considered a match if the match criteria above are NOT met.
            bool invert_match = 3 [json_name = "invert_match"];

            // The value of the header must start with the contents of prefixMatch.
            string prefix_match = 4 [json_name = "prefix_match"];

            // A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value.
            bool present_match = 5 [json_name = "present_match"];

            // The value of the header must end with the contents of suffixMatch.
            string suffix_match = 6 [json_name = "suffix_match"];
          }

          message QueryParameterMatch {
            // The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch.
            string exact_match = 1 [json_name = "exact_match"];

            // The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
            string name = 2;

            // Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not.
            bool present_match = 3 [json_name = "present_match"];
          }
        }

        message RouteAction {
          CdnPolicy cdn_policy = 1 [json_name = "cdn_policy"];

          CorsPolicy cors_policy = 2 [json_name = "cors_policy"];

          UrlRewrite url_rewrite = 3 [json_name = "url_rewrite"];

          message CdnPolicy {
            // Cache modes allow users to control the behaviour of the cache, what content it should cache automatically, whether to respect origin headers, or whether to unconditionally cache all responses.
            //
            // For all cache modes, Cache-Control headers will be passed to the client. Use clientTtl to override what is sent to the client. Possible values: ["CACHE_ALL_STATIC", "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", "BYPASS_CACHE"]
            string cache_mode = 1 [json_name = "cache_mode"];

            // Specifies a separate client (e.g. browser client) TTL, separate from the TTL used by the edge caches. Leaving this empty will use the same cache TTL for both the CDN and the client-facing response.
            //
            // - The TTL must be > 0 and <= 86400s (1 day)
            // - The clientTtl cannot be larger than the defaultTtl (if set)
            // - Fractions of a second are not allowed.
            //
            // Omit this field to use the defaultTtl, or the max-age set by the origin, as the client-facing TTL.
            //
            // When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
            // A duration in seconds terminated by 's'. Example: "3s".
            string client_ttl = 2 [json_name = "client_ttl"];

            // Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age).
            //
            // Defaults to 3600s (1 hour).
            //
            // - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
            // - Setting a TTL of "0" means "always revalidate" (equivalent to must-revalidate)
            // - The value of defaultTTL cannot be set to a value greater than that of maxTTL.
            // - Fractions of a second are not allowed.
            // - When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses.
            //
            // Note that infrequently accessed objects may be evicted from the cache before the defined TTL. Objects that expire will be revalidated with the origin.
            //
            // When the cache mode is set to "USE_ORIGIN_HEADERS" or "BYPASS_CACHE", you must omit this field.
            //
            // A duration in seconds terminated by 's'. Example: "3s".
            string default_ttl = 3 [json_name = "default_ttl"];

            // Specifies the maximum allowed TTL for cached content served by this origin.
            //
            // Defaults to 86400s (1 day).
            //
            // Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTtl seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive.
            //
            // - The TTL must be >= 0 and <= 31,536,000 seconds (1 year)
            // - Setting a TTL of "0" means "always revalidate"
            // - The value of maxTtl must be equal to or greater than defaultTtl.
            // - Fractions of a second are not allowed.
            //
            // When the cache mode is set to "USE_ORIGIN_HEADERS", "FORCE_CACHE_ALL", or "BYPASS_CACHE", you must omit this field.
            //
            // A duration in seconds terminated by 's'. Example: "3s".
            string max_ttl = 4 [json_name = "max_ttl"];

            // Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency.
            //
            // By default, the CDNPolicy will apply the following default TTLs to these status codes:
            //
            // - HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m
            // - HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s
            // - HTTP 405 (Method Not Found), 414 (URI Too Long), 501 (Not Implemented): 60s
            //
            // These defaults can be overridden in negativeCachingPolicy
            bool negative_caching = 5 [json_name = "negative_caching"];

            // Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
            //
            // - Omitting the policy and leaving negativeCaching enabled will use the default TTLs for each status code, defined in negativeCaching.
            // - TTLs must be >= 0 (where 0 is "always revalidate") and <= 86400s (1 day)
            //
            // Note that when specifying an explicit negativeCachingPolicy, you should take care to specify a cache TTL for all response codes that you wish to cache. The CDNPolicy will not apply any default negative caching when a policy exists.
            map<string, string> negative_caching_policy = 6 [json_name = "negative_caching_policy"];

            // The EdgeCacheKeyset containing the set of public keys used to validate signed requests at the edge.
            string signed_request_keyset = 7 [json_name = "signed_request_keyset"];

            // Limit how far into the future the expiration time of a signed request may be.
            //
            // When set, a signed request is rejected if its expiration time is later than now + signedRequestMaximumExpirationTtl, where now is the time at which the signed request is first handled by the CDN.
            //
            // - The TTL must be > 0.
            // - Fractions of a second are not allowed.
            //
            // By default, signedRequestMaximumExpirationTtl is not set and the expiration time of a signed request may be arbitrarily far into future.
            string signed_request_maximum_expiration_ttl = 8 [
              json_name = "signed_request_maximum_expiration_ttl"
            ];

            // Whether to enforce signed requests. The default value is DISABLED, which means all content is public, and does not authorize access.
            //
            // You must also set a signedRequestKeyset to enable signed requests.
            //
            // When set to REQUIRE_SIGNATURES, all matching requests will have their signature validated. Requests that were not signed with the corresponding private key, or that are otherwise invalid (expired, do not match the signature, IP address, or header) will be rejected with a HTTP 403 and (if enabled) logged. Possible values: ["DISABLED", "REQUIRE_SIGNATURES", "REQUIRE_TOKENS"]
            string signed_request_mode = 9 [json_name = "signed_request_mode"];

            AddSignatures add_signatures = 10 [json_name = "add_signatures"];

            CacheKeyPolicy cache_key_policy = 11 [json_name = "cache_key_policy"];

            SignedTokenOptions signed_token_options = 12 [json_name = "signed_token_options"];

            message AddSignatures {
              // The actions to take to add signatures to responses. Possible values: ["GENERATE_COOKIE", "GENERATE_TOKEN_HLS_COOKIELESS", "PROPAGATE_TOKEN_HLS_COOKIELESS"]
              repeated string actions = 1;

              // The parameters to copy from the verified token to the generated token.
              //
              // Only the following parameters may be copied:
              //
              //  * 'PathGlobs'
              //  * 'paths'
              //  * 'acl'
              //  * 'URLPrefix'
              //  * 'IPRanges'
              //  * 'SessionID'
              //  * 'id'
              //  * 'Data'
              //  * 'data'
              //  * 'payload'
              //  * 'Headers'
              //
              // You may specify up to 6 parameters to copy.  A given parameter is be copied only if the parameter exists in the verified token.  Parameter names are matched exactly as specified.  The order of the parameters does not matter.  Duplicates are not allowed.
              //
              // This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
              repeated string copied_parameters = 2 [json_name = "copied_parameters"];

              // The keyset to use for signature generation.
              //
              // The following are both valid paths to an EdgeCacheKeyset resource:
              //
              //  * 'projects/project/locations/global/edgeCacheKeysets/yourKeyset'
              //  * 'yourKeyset'
              //
              // This must be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.  This field may not be specified otherwise.
              string keyset = 3;

              // The query parameter in which to put the generated token.
              //
              // If not specified, defaults to 'edge-cache-token'.
              //
              // If specified, the name must be 1-64 characters long and match the regular expression '[a-zA-Z]([a-zA-Z0-9_-])*' which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
              //
              // This field may only be set when the GENERATE_TOKEN_HLS_COOKIELESS or PROPAGATE_TOKEN_HLS_COOKIELESS actions are specified.
              string token_query_parameter = 4 [json_name = "token_query_parameter"];

              // The duration the token is valid starting from the moment the token is first generated.
              //
              // Defaults to '86400s' (1 day).
              //
              // The TTL must be >= 0 and <= 604,800 seconds (1 week).
              //
              // This field may only be specified when the GENERATE_COOKIE or GENERATE_TOKEN_HLS_COOKIELESS actions are specified.
              //
              // A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
              string token_ttl = 5 [json_name = "token_ttl"];
            }

            message CacheKeyPolicy {
              // If true, requests to different hosts will be cached separately.
              //
              // Note: this should only be enabled if hosts share the same origin and content. Removing the host from the cache key may inadvertently result in different objects being cached than intended, depending on which route the first user matched.
              bool exclude_host = 1 [json_name = "exclude_host"];

              // If true, exclude query string parameters from the cache key
              //
              // If false (the default), include the query string parameters in
              // the cache key according to includeQueryParameters and
              // excludeQueryParameters. If neither includeQueryParameters nor
              // excludeQueryParameters is set, the entire query string will be
              // included.
              bool exclude_query_string = 2 [json_name = "exclude_query_string"];

              // Names of query string parameters to exclude from cache keys. All other parameters will be included.
              //
              // Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
              repeated string excluded_query_parameters = 3 [json_name = "excluded_query_parameters"];

              // If true, http and https requests will be cached separately.
              bool include_protocol = 4 [json_name = "include_protocol"];

              // Names of Cookies to include in cache keys.  The cookie name and cookie value of each cookie named will be used as part of the cache key.
              //
              // Cookie names:
              //  - must be valid RFC 6265 "cookie-name" tokens
              //  - are case sensitive
              //  - cannot start with "Edge-Cache-" (case insensitive)
              //
              //  Note that specifying several cookies, and/or cookies that have a large range of values (e.g., per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
              //
              //  You may specify up to three cookie names.
              repeated string included_cookie_names = 5 [json_name = "included_cookie_names"];

              // Names of HTTP request headers to include in cache keys. The value of the header field will be used as part of the cache key.
              //
              // - Header names must be valid HTTP RFC 7230 header field values.
              // - Header field names are case insensitive
              // - To include the HTTP method, use ":method"
              //
              // Note that specifying several headers, and/or headers that have a large range of values (e.g. per-user) will dramatically impact the cache hit rate, and may result in a higher eviction rate and reduced performance.
              repeated string included_header_names = 6 [json_name = "included_header_names"];

              // Names of query string parameters to include in cache keys. All other parameters will be excluded.
              //
              // Either specify includedQueryParameters or excludedQueryParameters, not both. '&' and '=' will be percent encoded and not treated as delimiters.
              repeated string included_query_parameters = 7 [json_name = "included_query_parameters"];
            }

            message SignedTokenOptions {
              // The allowed signature algorithms to use.
              //
              // Defaults to using only ED25519.
              //
              // You may specify up to 3 signature algorithms to use. Possible values: ["ED25519", "HMAC_SHA_256", "HMAC_SHA1"]
              repeated string allowed_signature_algorithms = 1 [json_name = "allowed_signature_algorithms"];

              // The query parameter in which to find the token.
              //
              // The name must be 1-64 characters long and match the regular expression '[a-zA-Z]([a-zA-Z0-9_-])*' which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
              //
              // Defaults to 'edge-cache-token'.
              string token_query_parameter = 2 [json_name = "token_query_parameter"];
            }
          }

          message CorsPolicy {
            // In response to a preflight request, setting this to true indicates that the actual request can include user credentials.
            //
            // This translates to the Access-Control-Allow-Credentials response header.
            bool allow_credentials = 1 [json_name = "allow_credentials"];

            // Specifies the content for the Access-Control-Allow-Headers response header.
            repeated string allow_headers = 2 [json_name = "allow_headers"];

            // Specifies the content for the Access-Control-Allow-Methods response header.
            repeated string allow_methods = 3 [json_name = "allow_methods"];

            // Specifies the list of origins that will be allowed to do CORS requests.
            //
            // This translates to the Access-Control-Allow-Origin response header.
            repeated string allow_origins = 4 [json_name = "allow_origins"];

            // If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
            bool disabled = 5;

            // Specifies the content for the Access-Control-Allow-Headers response header.
            repeated string expose_headers = 6 [json_name = "expose_headers"];

            // Specifies how long results of a preflight request can be cached by a client in seconds. Note that many browser clients enforce a maximum TTL of 600s (10 minutes).
            //
            // - Setting the value to -1 forces a pre-flight check for all requests (not recommended)
            // - A maximum TTL of 86400s can be set, but note that (as above) some clients may force pre-flight checks at a more regular interval.
            // - This translates to the Access-Control-Max-Age header.
            //
            // A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
            string max_age = 7 [json_name = "max_age"];
          }

          message UrlRewrite {
            // Prior to forwarding the request to the selected origin, the request's host header is replaced with contents of hostRewrite.
            string host_rewrite = 1 [json_name = "host_rewrite"];

            // Prior to forwarding the request to the selected origin, the matching portion of the request's path is replaced by pathPrefixRewrite.
            string path_prefix_rewrite = 2 [json_name = "path_prefix_rewrite"];

            // Prior to forwarding the request to the selected origin, if the
            // request matched a pathTemplateMatch, the matching portion of the
            // request's path is replaced re-written using the pattern specified
            // by pathTemplateRewrite.
            //
            // pathTemplateRewrite must be between 1 and 255 characters
            // (inclusive), must start with a '/', and must only use variables
            // captured by the route's pathTemplate matchers.
            //
            // pathTemplateRewrite may only be used when all of a route's
            // MatchRules specify pathTemplate.
            //
            // Only one of pathPrefixRewrite and pathTemplateRewrite may be
            // specified.
            string path_template_rewrite = 3 [json_name = "path_template_rewrite"];
          }
        }

        message UrlRedirect {
          // The host that will be used in the redirect response instead of the one that was supplied in the request.
          string host_redirect = 1 [json_name = "host_redirect"];

          // If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request.
          //
          // This can only be set if there is at least one (1) edgeSslCertificate set on the service.
          bool https_redirect = 2 [json_name = "https_redirect"];

          // The path that will be used in the redirect response instead of the one that was supplied in the request.
          //
          // pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
          //
          // The path value must be between 1 and 1024 characters.
          string path_redirect = 3 [json_name = "path_redirect"];

          // The prefix that replaces the prefixMatch specified in the routeRule, retaining the remaining portion of the URL before redirecting the request.
          //
          // prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
          string prefix_redirect = 4 [json_name = "prefix_redirect"];

          // The HTTP Status code to use for this RedirectAction.
          //
          // The supported values are:
          //
          // - 'MOVED_PERMANENTLY_DEFAULT', which is the default value and corresponds to 301.
          // - 'FOUND', which corresponds to 302.
          // - 'SEE_OTHER' which corresponds to 303.
          // - 'TEMPORARY_REDIRECT', which corresponds to 307. in this case, the request method will be retained.
          // - 'PERMANENT_REDIRECT', which corresponds to 308. in this case, the request method will be retained. Possible values: ["MOVED_PERMANENTLY_DEFAULT", "FOUND", "SEE_OTHER", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT"]
          string redirect_response_code = 5 [json_name = "redirect_response_code"];

          // If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.
          bool strip_query = 6 [json_name = "strip_query"];
        }
      }
    }
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}
