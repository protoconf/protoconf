syntax = "proto3";

// Provider: google 4.69.1
package terraform.google.resources.v4;

import "terraform/v1/meta.proto";

// GoogleEventarcChannel version is 0
message GoogleEventarcChannel {
  // Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.
  string activation_token = 1 [json_name = "activation_token"];

  // Output only. The creation time.
  string create_time = 2 [json_name = "create_time"];

  // Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
  string crypto_key_name = 3 [json_name = "crypto_key_name"];

  string id = 4;

  // The location for the resource
  string location = 5;

  // Required. The resource name of the channel. Must be unique within the location on the project.
  string name = 6;

  // The project for the resource
  string project = 7;

  // Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
  string pubsub_topic = 8 [json_name = "pubsub_topic"];

  // Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
  string state = 9;

  // The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
  string third_party_provider = 10 [json_name = "third_party_provider"];

  // Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
  string uid = 11;

  // Output only. The last-modified time.
  string update_time = 12 [json_name = "update_time"];

  repeated Timeouts timeouts = 13;

  map<string, string> for_each = 14 [json_name = "for_each"];

  repeated string depends_on = 15 [json_name = "depends_on"];

  int32 count = 16;

  string provider = 17;

  terraform.v1.Lifecycle lifecycle = 18;

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleEventarcGoogleChannelConfig version is 0
message GoogleEventarcGoogleChannelConfig {
  // Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
  string crypto_key_name = 1 [json_name = "crypto_key_name"];

  string id = 2;

  // The location for the resource
  string location = 3;

  // Required. The resource name of the config. Must be in the format of, `projects/{project}/locations/{location}/googleChannelConfig`.
  string name = 4;

  // The project for the resource
  string project = 5;

  // Output only. The last-modified time.
  string update_time = 6 [json_name = "update_time"];

  repeated Timeouts timeouts = 7;

  map<string, string> for_each = 8 [json_name = "for_each"];

  repeated string depends_on = 9 [json_name = "depends_on"];

  int32 count = 10;

  string provider = 11;

  terraform.v1.Lifecycle lifecycle = 12;

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }
}

// GoogleEventarcTrigger version is 0
message GoogleEventarcTrigger {
  // Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
  string channel = 1;

  // Output only. The reason(s) why a trigger is in FAILED state.
  map<string, string> conditions = 2;

  // Output only. The creation time.
  string create_time = 3 [json_name = "create_time"];

  // Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
  string etag = 4;

  string id = 5;

  // Optional. User labels attached to the triggers that can be used to group resources.
  map<string, string> labels = 6;

  // The location for the resource
  string location = 7;

  // Required. The resource name of the trigger. Must be unique within the location on the project.
  string name = 8;

  // The project for the resource
  string project = 9;

  // Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have `roles/eventarc.eventReceiver` IAM role.
  string service_account = 10 [json_name = "service_account"];

  // Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
  string uid = 11;

  // Output only. The last-modified time.
  string update_time = 12 [json_name = "update_time"];

  Destination destination = 13;

  repeated MatchingCriteria matching_criteria = 14 [json_name = "matching_criteria"];

  repeated Timeouts timeouts = 15;

  Transport transport = 16;

  map<string, string> for_each = 17 [json_name = "for_each"];

  repeated string depends_on = 18 [json_name = "depends_on"];

  int32 count = 19;

  string provider = 20;

  terraform.v1.Lifecycle lifecycle = 21;

  message Destination {
    // [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
    string cloud_function = 1 [json_name = "cloud_function"];

    // The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
    string workflow = 2;

    CloudRunService cloud_run_service = 3 [json_name = "cloud_run_service"];

    Gke gke = 4;

    message CloudRunService {
      // Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
      string path = 1;

      // Required. The region the Cloud Run service is deployed in.
      string region = 2;

      // Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
      string service = 3;
    }

    message Gke {
      // Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
      string cluster = 1;

      // Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
      string location = 2;

      // Required. The namespace the GKE service is running in.
      string namespace = 3;

      // Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
      string path = 4;

      // Required. Name of the GKE service.
      string service = 5;
    }
  }

  message MatchingCriteria {
    // Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
    string attribute = 1;

    // Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.
    string operator = 2;

    // Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
    string value = 3;
  }

  message Timeouts {
    string create = 1;

    string delete = 2;

    string update = 3;
  }

  message Transport {
    Pubsub pubsub = 1;

    message Pubsub {
      // Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
      string subscription = 1;

      // Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
      string topic = 2;
    }
  }
}
