syntax = "proto3";

// Provider: aws 5.2.0
package terraform.aws.datasources.v5;

import "terraform/v1/meta.proto";

// AwsLicensemanagerGrants version is 0
message AwsLicensemanagerGrants {
  repeated string arns = 1;

  string id = 2;

  repeated Filter filter = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Filter {
    string name = 1;

    repeated string values = 2;
  }
}

// AwsLicensemanagerReceivedLicense version is 0
message AwsLicensemanagerReceivedLicense {
  string beneficiary = 1;

  repeated ConsumptionConfiguration consumption_configuration = 2 [json_name = "consumption_configuration"];

  string create_time = 3 [json_name = "create_time"];

  repeated Entitlements entitlements = 4;

  string home_region = 5 [json_name = "home_region"];

  string id = 6;

  repeated Issuer issuer = 7;

  string license_arn = 8 [json_name = "license_arn"];

  repeated LicenseMetadata license_metadata = 9 [json_name = "license_metadata"];

  string license_name = 10 [json_name = "license_name"];

  string product_name = 11 [json_name = "product_name"];

  string product_sku = 12 [json_name = "product_sku"];

  repeated ReceivedMetadata received_metadata = 13 [json_name = "received_metadata"];

  string status = 14;

  repeated Validity validity = 15;

  string version = 16;

  map<string, string> for_each = 17 [json_name = "for_each"];

  repeated string depends_on = 18 [json_name = "depends_on"];

  int32 count = 19;

  string provider = 20;

  terraform.v1.Lifecycle lifecycle = 21;

  message ConsumptionConfiguration {
    // borrow_configuration: list of object
    repeated BorrowConfiguration borrow_configuration = 1 [json_name = "borrow_configuration"];

    // provisional_configuration: list of object
    repeated ProvisionalConfiguration provisional_configuration = 2 [json_name = "provisional_configuration"];

    // renew_type: string
    string renew_type = 3 [json_name = "renew_type"];

    message BorrowConfiguration {
      // allow_early_check_in: bool
      bool allow_early_check_in = 1 [json_name = "allow_early_check_in"];

      // max_time_to_live_in_minutes: number
      int64 max_time_to_live_in_minutes = 2 [json_name = "max_time_to_live_in_minutes"];
    }

    message ProvisionalConfiguration {
      // max_time_to_live_in_minutes: number
      int64 max_time_to_live_in_minutes = 1 [json_name = "max_time_to_live_in_minutes"];
    }
  }

  message Entitlements {
    // allow_check_in: bool
    bool allow_check_in = 1 [json_name = "allow_check_in"];

    // max_count: number
    int64 max_count = 2 [json_name = "max_count"];

    // name: string
    string name = 3;

    // unit: string
    string unit = 4;

    // value: string
    string value = 5;
  }

  message Issuer {
    // key_fingerprint: string
    string key_fingerprint = 1 [json_name = "key_fingerprint"];

    // name: string
    string name = 2;

    // sign_key: string
    string sign_key = 3 [json_name = "sign_key"];
  }

  message LicenseMetadata {
    // name: string
    string name = 1;

    // value: string
    string value = 2;
  }

  message ReceivedMetadata {
    // allowed_operations: set of string
    repeated string allowed_operations = 1 [json_name = "allowed_operations"];

    // received_status: string
    string received_status = 2 [json_name = "received_status"];

    // received_status_reason: string
    string received_status_reason = 3 [json_name = "received_status_reason"];
  }

  message Validity {
    // begin: string
    string begin = 1;

    // end: string
    string end = 2;
  }
}

// AwsLicensemanagerReceivedLicenses version is 0
message AwsLicensemanagerReceivedLicenses {
  repeated string arns = 1;

  string id = 2;

  repeated Filter filter = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Filter {
    string name = 1;

    repeated string values = 2;
  }
}
