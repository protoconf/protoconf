// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoconf_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoconfServiceClient is the client API for ProtoconfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoconfServiceClient interface {
	SubscribeForConfig(ctx context.Context, in *ConfigSubscriptionRequest, opts ...grpc.CallOption) (ProtoconfService_SubscribeForConfigClient, error)
}

type protoconfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoconfServiceClient(cc grpc.ClientConnInterface) ProtoconfServiceClient {
	return &protoconfServiceClient{cc}
}

func (c *protoconfServiceClient) SubscribeForConfig(ctx context.Context, in *ConfigSubscriptionRequest, opts ...grpc.CallOption) (ProtoconfService_SubscribeForConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoconfService_ServiceDesc.Streams[0], "/protoconf.v1.ProtoconfService/SubscribeForConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoconfServiceSubscribeForConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoconfService_SubscribeForConfigClient interface {
	Recv() (*ConfigUpdate, error)
	grpc.ClientStream
}

type protoconfServiceSubscribeForConfigClient struct {
	grpc.ClientStream
}

func (x *protoconfServiceSubscribeForConfigClient) Recv() (*ConfigUpdate, error) {
	m := new(ConfigUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtoconfServiceServer is the server API for ProtoconfService service.
// All implementations must embed UnimplementedProtoconfServiceServer
// for forward compatibility
type ProtoconfServiceServer interface {
	SubscribeForConfig(*ConfigSubscriptionRequest, ProtoconfService_SubscribeForConfigServer) error
	mustEmbedUnimplementedProtoconfServiceServer()
}

// UnimplementedProtoconfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoconfServiceServer struct {
}

func (UnimplementedProtoconfServiceServer) SubscribeForConfig(*ConfigSubscriptionRequest, ProtoconfService_SubscribeForConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeForConfig not implemented")
}
func (UnimplementedProtoconfServiceServer) mustEmbedUnimplementedProtoconfServiceServer() {}

// UnsafeProtoconfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoconfServiceServer will
// result in compilation errors.
type UnsafeProtoconfServiceServer interface {
	mustEmbedUnimplementedProtoconfServiceServer()
}

func RegisterProtoconfServiceServer(s grpc.ServiceRegistrar, srv ProtoconfServiceServer) {
	s.RegisterService(&ProtoconfService_ServiceDesc, srv)
}

func _ProtoconfService_SubscribeForConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoconfServiceServer).SubscribeForConfig(m, &protoconfServiceSubscribeForConfigServer{stream})
}

type ProtoconfService_SubscribeForConfigServer interface {
	Send(*ConfigUpdate) error
	grpc.ServerStream
}

type protoconfServiceSubscribeForConfigServer struct {
	grpc.ServerStream
}

func (x *protoconfServiceSubscribeForConfigServer) Send(m *ConfigUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// ProtoconfService_ServiceDesc is the grpc.ServiceDesc for ProtoconfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoconfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoconf.v1.ProtoconfService",
	HandlerType: (*ProtoconfServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeForConfig",
			Handler:       _ProtoconfService_SubscribeForConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoconf/v1/protoconf.proto",
}

// ProtoconfMutationServiceClient is the client API for ProtoconfMutationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoconfMutationServiceClient interface {
	MutateConfig(ctx context.Context, in *ConfigMutationRequest, opts ...grpc.CallOption) (*ConfigMutationResponse, error)
}

type protoconfMutationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoconfMutationServiceClient(cc grpc.ClientConnInterface) ProtoconfMutationServiceClient {
	return &protoconfMutationServiceClient{cc}
}

func (c *protoconfMutationServiceClient) MutateConfig(ctx context.Context, in *ConfigMutationRequest, opts ...grpc.CallOption) (*ConfigMutationResponse, error) {
	out := new(ConfigMutationResponse)
	err := c.cc.Invoke(ctx, "/protoconf.v1.ProtoconfMutationService/MutateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoconfMutationServiceServer is the server API for ProtoconfMutationService service.
// All implementations must embed UnimplementedProtoconfMutationServiceServer
// for forward compatibility
type ProtoconfMutationServiceServer interface {
	MutateConfig(context.Context, *ConfigMutationRequest) (*ConfigMutationResponse, error)
	mustEmbedUnimplementedProtoconfMutationServiceServer()
}

// UnimplementedProtoconfMutationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoconfMutationServiceServer struct {
}

func (UnimplementedProtoconfMutationServiceServer) MutateConfig(context.Context, *ConfigMutationRequest) (*ConfigMutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateConfig not implemented")
}
func (UnimplementedProtoconfMutationServiceServer) mustEmbedUnimplementedProtoconfMutationServiceServer() {
}

// UnsafeProtoconfMutationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoconfMutationServiceServer will
// result in compilation errors.
type UnsafeProtoconfMutationServiceServer interface {
	mustEmbedUnimplementedProtoconfMutationServiceServer()
}

func RegisterProtoconfMutationServiceServer(s grpc.ServiceRegistrar, srv ProtoconfMutationServiceServer) {
	s.RegisterService(&ProtoconfMutationService_ServiceDesc, srv)
}

func _ProtoconfMutationService_MutateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMutationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoconfMutationServiceServer).MutateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoconf.v1.ProtoconfMutationService/MutateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoconfMutationServiceServer).MutateConfig(ctx, req.(*ConfigMutationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoconfMutationService_ServiceDesc is the grpc.ServiceDesc for ProtoconfMutationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoconfMutationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoconf.v1.ProtoconfMutationService",
	HandlerType: (*ProtoconfMutationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MutateConfig",
			Handler:    _ProtoconfMutationService_MutateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoconf/v1/protoconf.proto",
}

// ProtoconfMutationReportServiceClient is the client API for ProtoconfMutationReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoconfMutationReportServiceClient interface {
	ReportProgress(ctx context.Context, in *ConfigMutationResponse, opts ...grpc.CallOption) (*ConfigMutationResponse, error)
}

type protoconfMutationReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoconfMutationReportServiceClient(cc grpc.ClientConnInterface) ProtoconfMutationReportServiceClient {
	return &protoconfMutationReportServiceClient{cc}
}

func (c *protoconfMutationReportServiceClient) ReportProgress(ctx context.Context, in *ConfigMutationResponse, opts ...grpc.CallOption) (*ConfigMutationResponse, error) {
	out := new(ConfigMutationResponse)
	err := c.cc.Invoke(ctx, "/protoconf.v1.ProtoconfMutationReportService/ReportProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoconfMutationReportServiceServer is the server API for ProtoconfMutationReportService service.
// All implementations must embed UnimplementedProtoconfMutationReportServiceServer
// for forward compatibility
type ProtoconfMutationReportServiceServer interface {
	ReportProgress(context.Context, *ConfigMutationResponse) (*ConfigMutationResponse, error)
	mustEmbedUnimplementedProtoconfMutationReportServiceServer()
}

// UnimplementedProtoconfMutationReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoconfMutationReportServiceServer struct {
}

func (UnimplementedProtoconfMutationReportServiceServer) ReportProgress(context.Context, *ConfigMutationResponse) (*ConfigMutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProgress not implemented")
}
func (UnimplementedProtoconfMutationReportServiceServer) mustEmbedUnimplementedProtoconfMutationReportServiceServer() {
}

// UnsafeProtoconfMutationReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoconfMutationReportServiceServer will
// result in compilation errors.
type UnsafeProtoconfMutationReportServiceServer interface {
	mustEmbedUnimplementedProtoconfMutationReportServiceServer()
}

func RegisterProtoconfMutationReportServiceServer(s grpc.ServiceRegistrar, srv ProtoconfMutationReportServiceServer) {
	s.RegisterService(&ProtoconfMutationReportService_ServiceDesc, srv)
}

func _ProtoconfMutationReportService_ReportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMutationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoconfMutationReportServiceServer).ReportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoconf.v1.ProtoconfMutationReportService/ReportProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoconfMutationReportServiceServer).ReportProgress(ctx, req.(*ConfigMutationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoconfMutationReportService_ServiceDesc is the grpc.ServiceDesc for ProtoconfMutationReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoconfMutationReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoconf.v1.ProtoconfMutationReportService",
	HandlerType: (*ProtoconfMutationReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportProgress",
			Handler:    _ProtoconfMutationReportService_ReportProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoconf/v1/protoconf.proto",
}

// ProtoconfCompileClient is the client API for ProtoconfCompile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoconfCompileClient interface {
	CompileFiles(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (ProtoconfCompile_CompileFilesClient, error)
}

type protoconfCompileClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoconfCompileClient(cc grpc.ClientConnInterface) ProtoconfCompileClient {
	return &protoconfCompileClient{cc}
}

func (c *protoconfCompileClient) CompileFiles(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (ProtoconfCompile_CompileFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoconfCompile_ServiceDesc.Streams[0], "/protoconf.v1.ProtoconfCompile/CompileFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoconfCompileCompileFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoconfCompile_CompileFilesClient interface {
	Recv() (*CompileResponse, error)
	grpc.ClientStream
}

type protoconfCompileCompileFilesClient struct {
	grpc.ClientStream
}

func (x *protoconfCompileCompileFilesClient) Recv() (*CompileResponse, error) {
	m := new(CompileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtoconfCompileServer is the server API for ProtoconfCompile service.
// All implementations must embed UnimplementedProtoconfCompileServer
// for forward compatibility
type ProtoconfCompileServer interface {
	CompileFiles(*CompileRequest, ProtoconfCompile_CompileFilesServer) error
	mustEmbedUnimplementedProtoconfCompileServer()
}

// UnimplementedProtoconfCompileServer must be embedded to have forward compatible implementations.
type UnimplementedProtoconfCompileServer struct {
}

func (UnimplementedProtoconfCompileServer) CompileFiles(*CompileRequest, ProtoconfCompile_CompileFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method CompileFiles not implemented")
}
func (UnimplementedProtoconfCompileServer) mustEmbedUnimplementedProtoconfCompileServer() {}

// UnsafeProtoconfCompileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoconfCompileServer will
// result in compilation errors.
type UnsafeProtoconfCompileServer interface {
	mustEmbedUnimplementedProtoconfCompileServer()
}

func RegisterProtoconfCompileServer(s grpc.ServiceRegistrar, srv ProtoconfCompileServer) {
	s.RegisterService(&ProtoconfCompile_ServiceDesc, srv)
}

func _ProtoconfCompile_CompileFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoconfCompileServer).CompileFiles(m, &protoconfCompileCompileFilesServer{stream})
}

type ProtoconfCompile_CompileFilesServer interface {
	Send(*CompileResponse) error
	grpc.ServerStream
}

type protoconfCompileCompileFilesServer struct {
	grpc.ServerStream
}

func (x *protoconfCompileCompileFilesServer) Send(m *CompileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProtoconfCompile_ServiceDesc is the grpc.ServiceDesc for ProtoconfCompile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoconfCompile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoconf.v1.ProtoconfCompile",
	HandlerType: (*ProtoconfCompileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompileFiles",
			Handler:       _ProtoconfCompile_CompileFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoconf/v1/protoconf.proto",
}
