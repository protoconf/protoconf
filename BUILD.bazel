load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@graknlabs_bazel_distribution//common:rules.bzl", "assemble_zip", "assemble_targz", "assemble_versioned")
load("@graknlabs_bazel_distribution//github:rules.bzl", "deploy_github")

# gazelle:prefix github.com/protoconf/protoconf
gazelle(name = "gazelle")

nogo(
    name = "protoconf_nogo",
    config = "//tools:nogo_config",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomicalign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildssa:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/cgocall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/composite:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/ctrlflow:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/deepequalerrors:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/findcall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/inspect:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/lostcancel:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilness:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/pkgfact:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shadow:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unmarshal:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unusedresult:go_tool_library",
    ],
)

alias(
    name = "protoconf",
    actual = "//cmd/protoconf",
)

alias(
    name = "buildifier",
    actual = "@com_github_bazelbuild_buildtools//buildifier",
)

genrule(
    name = "release",
    outs = ["out.txt"],
    cmd = "&&".join([
        "$(location //docker:protoconf_release)",
        "$(location //docker:agent_release)",
        "$(location //docker:server_release)",
        "echo 'echo done' > $@",
    ]),
    exec_tools = [
        "//docker:protoconf_release",
        "//docker:agent_release",
        "//docker:server_release",
    ],
    tags = ["manual"],
    executable = True,
)

# `root_proto` and `go_default_library` helps with compiling examples which uses `import "secret.proto"`
alias(
    name = "root_proto",
    actual = "//protostdlib/secret:secret_proto",
    visibility = ["//visibility:public"],
)

alias(
    name = "go_default_library",
    actual = "//protostdlib/secret:go_default_library",
    visibility = ["//visibility:public"],
)

# Releasing protoconf
assemble_targz(
    name = "protoconf-darwin",
    additional_files = {
        "//cmd/protoconf:protoconf-darwin": "./protoconf",
    },
    output_filename = "",
)

assemble_targz(
    name = "protoconf-linux",
    additional_files = {
        "//cmd/protoconf:protoconf-linux": "./protoconf",
    },
    output_filename = "",
)

assemble_targz(
    name = "protoconf-windows-tgz",
    additional_files = {
        "//cmd/protoconf:protoconf-windows": "./protoconf.exe",
    },
    output_filename = "",
)

assemble_zip(
    name = "protoconf-windows",
    targets = [":protoconf-windows-tgz"],
    output_filename = "protoconf-windows",
)

# Releasing pc4tf
assemble_targz(
    name = "pc4tf-darwin",
    additional_files = {
        "//cmd/pc4tf:pc4tf-darwin": "./pc4tf",
    },
    output_filename = "",
)

assemble_targz(
    name = "pc4tf-linux",
    additional_files = {
        "//cmd/pc4tf:pc4tf-linux": "./pc4tf",
    },
    output_filename = "",
)

assemble_targz(
    name = "pc4tf-windows-tgz",
    additional_files = {
        "//cmd/pc4tf:pc4tf-windows": "./pc4tf.exe",
    },
    output_filename = "",
)

assemble_zip(
    name = "pc4tf-windows",
    targets = [":pc4tf-windows-tgz"],
    output_filename = "pc4tf-windows",
)

assemble_versioned(
    name = "protoconf-versioned-all",
    version_file = "//:VERSION",
    targets = [
        ":protoconf-linux",
        ":protoconf-darwin",
        ":protoconf-windows",
        ":pc4tf-linux",
        ":pc4tf-darwin",
        ":pc4tf-windows",
    ],
)

load("@graknlabs_bazel_distribution//github:rules.bzl", "deploy_github")

deploy_github(
    name = "deploy-github",
    deployment_properties = "//:deployment.properties",
    title = "protoconf",
    title_append_version = True,
    version_file = "//:VERSION",
    # release_description = "//:RELEASE_TEMPLATE.md",
    archive = ":protoconf-versioned-all",
)
