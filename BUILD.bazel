load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load(
    "@graknlabs_bazel_distribution//common:rules.bzl",
    "assemble_versioned",
)
load("//:platforms.bzl", "versions")
load("@graknlabs_bazel_distribution//github:rules.bzl", "deploy_github")

# gazelle:prefix github.com/protoconf/protoconf
gazelle(name = "gazelle")

nogo(
    name = "protoconf_nogo",
    config = "//tools:nogo_config",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomicalign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildssa:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/cgocall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/composite:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/ctrlflow:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/deepequalerrors:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/findcall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/inspect:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/lostcancel:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilness:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/pkgfact:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shadow:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unmarshal:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unusedresult:go_tool_library",
    ],
)

alias(
    name = "protoconf",
    actual = "//cmd/protoconf",
)

alias(
    name = "buildifier",
    actual = "@com_github_bazelbuild_buildtools//buildifier",
)

genrule(
    name = "release",
    outs = ["out.txt"],
    cmd = "&&".join(
        [
            "$(location //docker:protoconf_release)",
            "$(location //docker:agent_release)",
            "$(location //docker:server_release)",
            "$(location //docker:exec_release)",
            "echo 'echo done' > $@",
        ],
    ),
    exec_tools = [
        "//docker:protoconf_release",
        "//docker:agent_release",
        "//docker:server_release",
        "//docker:exec_release",
    ],
    executable = True,
    tags = ["manual"],
)

# Releasing protoconf
assemble_versioned(
    name = "protoconf-versioned-all",
    targets = versions(),
    version_file = "//:VERSION",
)

deploy_github(
    name = "deploy-github",
    # release_description = "//:RELEASE_TEMPLATE.md",
    archive = ":protoconf-versioned-all",
    deployment_properties = "//:deployment.properties",
    title = "protoconf",
    title_append_version = True,
    version_file = "//:VERSION",
)

filegroup(
    name = "coverage_files",
    srcs = glob(["bazel-out/**/coverage.dat"]),
)

genrule(
    name = "aggregate_cov_files",
    srcs = [":coverage_files"],
    outs = ["coverage.dat"],
    cmd = "echo 'mode: set' > $@; grep -h -v '^mode: set$$' $(locations :coverage_files) >> $@",
    tags = ["manual"],
)
